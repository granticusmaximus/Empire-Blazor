@page "/tickets"
@using Empire.Models
@using Empire.Service
@inject TicketService ticketService
@inject NavigationManager navi
@attribute [AllowAnonymous]

<style>
    .action-buttons button {
        padding: 0.2rem 0.4rem;
        /* Reduces padding */
        margin-right: 0.2rem;
        /* Reduces space between buttons */
        vertical-align: middle;
        /* Aligns buttons vertically */
    }

    .action-col {
        width: 15%;
        /* Adjust as needed to give enough space */
    }
</style>

<style>
    .action-buttons button {
        padding: 0.2rem 0.4rem;
        /* Reduces padding */
        margin-right: 0.2rem;
        /* Reduces space between buttons */
        vertical-align: middle;
        /* Aligns buttons vertically */
    }

    .action-col {
        width: 15%;
        /* Adjust as needed to give enough space */
    }
</style>
<hr />
<div class="col-md-6">
    <button @onclick="OpenAddNewTicketModal" class="btn btn-warning">Create New Task</button>
</div>
<hr />
<div class="btn-group flex-row justify-content-evenly">
    <button @onclick="(() => SortTickets(TicketField.TicketID))" class="btn btn-primary filter-button">Ticket ID</button>
    <button @onclick="(() => SortTickets(TicketField.Title))" class="btn btn-primary filter-button">Title</button>
    <button @onclick="(() => SortTickets(TicketField.Severity))" class="btn btn-primary filter-button">Severity</button>
    <button @onclick="(() => SortTickets(TicketField.DueDate))" class="btn btn-primary filter-button">Due Date</button>
</div>
@if (tickets == null)
{
    <p>Loading tickets...</p>
}
else
{
    <table class="table table-striped">
    <thead class="thead-dark">
        <tr class="text-center">
            <th scope="col">Title</th>
            <th scope="col" class="col-2">Severity</th>
            <th scope="col" class="col-1">Due Date</th>
            <th scope="col" class="action-col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ticket in tickets)
            {
                <tr style="vertical-align: middle;">
                    <td>@ticket.Title</td>
                    <td class="@GetSeverityCssClass(ticket.Severity.ToString()) text-uppercase text-white text-center"
                        style="font-weight: 700">@ticket.Severity</td>
                    <td class="text-center">@ticket.DueDate.ToShortDateString()</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-primary mb-0" @onclick="() => ViewTicketDetails(ticket.TicketId)">
                                <span class="oi oi-eye" aria-hidden="true"></span>
                            </button>
                            <button class="btn btn-danger mb-0" @onclick="() => DeleteTicket(ticket.TicketId)">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<!-- Add New Ticket Modal -->
<div class="modal fade @(showAddNewTicketModal ? "show d-block" : "")" id="addTaskModal" tabindex="-1" role="dialog"
    aria-labelledby="addTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTaskModalLabel">Add New Ticket</h5>
                <button type="button" class="close" @onclick="CloseAddNewTicketModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <CreateTicket />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseAddNewTicketModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Ticket> tickets = new List<Ticket>();
    private TicketField sortedColumn = TicketField.TicketID;
    private bool sortDescending = false;
    private bool showAddNewTicketModal = false;

    private void OpenAddNewTicketModal()
    {
        showAddNewTicketModal = true;
    }

    private void CloseAddNewTicketModal()
    {
        showAddNewTicketModal = false;
    }

    public enum TicketField
    {
        TicketID,
        Title,
        Severity,
        DueDate
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTickets();
    }

    private async Task LoadTickets()
    {
        tickets = await ticketService.GetAllTasksAsync();
        SortTickets(sortedColumn);
    }

    private void SortTickets(TicketField column)
    {
        if (column == sortedColumn)
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortedColumn = column;
            sortDescending = false;
        }

        tickets = SortTicketsList(tickets, sortedColumn, sortDescending);
    }

    private List<Ticket> SortTicketsList(List<Ticket> ticketList, TicketField column, bool descending)
    {
        switch (column)
        {
            case TicketField.Title:
                return descending ? ticketList.OrderByDescending(t => t.Title).ToList() : ticketList.OrderBy(t => t.Title).ToList();
            case TicketField.Severity:
                return descending ? ticketList.OrderByDescending(t => t.Severity).ToList() : ticketList.OrderBy(t =>
                t.Severity).ToList();
            case TicketField.DueDate:
                return descending ? ticketList.OrderByDescending(t => t.DueDate).ToList() : ticketList.OrderBy(t => t.DueDate).ToList();
            default:
                return descending ? ticketList.OrderByDescending(t => t.TicketId).ToList() : ticketList.OrderBy(t =>
                t.TicketId).ToList();
        }
    }

    private string GetSeverityCssClass(string severity)
    {
        switch (severity.ToLower())
        {
            case "low":
                return "bg-success"; // Green
            case "medium":
                return "bg-warning"; // Orange
            case "high":
                return "bg-danger"; // Red
            default:
                return "";
        }
    }

    private async Task DeleteTicket(string ticketId)
    {
        var confirmed = true; // Implement confirmation logic if needed
        if (confirmed)
        {
            await ticketService.DeleteTaskAsync(ticketId);
            await LoadTickets(); // Reload tickets to update the list
        }
    }

    private void ViewTicketDetails(string ticketId)
    {
        navi.NavigateTo($"/tickets/details/{ticketId}");
    }
}
