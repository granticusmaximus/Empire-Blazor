@page "/create"
@using Empire.Models
@using Empire.Service
@using System.Xml.Linq
@using System.Text
@inject TicketService ticketService
@inject NavigationManager navi

@attribute [Authorize]

<AuthorizeView Roles="Admin">
    <Authorized>
        <div>Content for admin users.</div>
    </Authorized>
</AuthorizeView>

<EditForm Model="@_ticket" OnValidSubmit="SaveTicket">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <div class="row">
            <div class="form-group col-md-10">
                <label for="title">Title:</label>
                <InputText id="title" class="form-control" @bind-Value="_ticket.Title" />
                <ValidationMessage For="@(() => _ticket.Title)" class="text-danger" />
            </div>
            
        </div>
    </div>
    <div class="mb-3">
        <div class="row">
            <div class="form-group col-md-10">
                <label for="dueDate">Due Date:</label>
                <InputDate id="dueDate" class="form-control"
                           @bind-Value="_ticket.DueDate"
                           min="2020-01-01"
                           max="@($"{DateTime.Now.Year}-12-56")" />
                <ValidationMessage For="@(() => _ticket.DueDate)" class="text-danger" />
            </div>
        </div>
    </div>

    <div class="mb-3">
        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="_ticket.Description" />
            <ValidationMessage For="@(() => _ticket.Description)" class="text-danger" />
        </div>
    </div>

    <div class="mb-3">
        <div class="row">
            <div class="form-group col-md-6">
                <label for="severity">Severity:</label>
                <InputSelect id="severity" class="form-control" @bind-Value="_ticket.Severity">
                    <option value="">--Select Option--</option>
                    @foreach (var severity in Enum.GetValues<TicketSeverity>())
                    {
                        <option value="@severity">@severity</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _ticket.Severity)" class="text-danger" />
            </div>
        </div>
    </div>

    <div class="text-end">
        <button type="submit" class="btn btn-primary">Save Ticket</button>
    </div>

    @if (showWarning)
    {
        <div class="mb-3">
            <div class="alert alert-warning mb-3" role="alert">
                Please fill in all the required fields.
            </div>
        </div>

    }
</EditForm>


@code {
    private Ticket _ticket = new Ticket { DueDate = DateTime.Now.Date < new DateTime(2020, 1, 1) ? new DateTime(2020, 1, 1) : DateTime.Now.Date };
    private bool showWarning = false;
    private static readonly Random random = new Random();

    private async Task SaveTicket()
    {
        if (string.IsNullOrEmpty(_ticket.Title) || string.IsNullOrEmpty(_ticket.Description) ||
        string.IsNullOrEmpty(_ticket.Severity.ToString()))
        {
            showWarning = true;
            return;
        }

        string randomId = GenerateRandomId(24);
        _ticket.TicketId = randomId;
        _ticket.TimeOfCreation = DateTime.Now; // Set the creation time here

        await ticketService.CreateNewTaskAsync(_ticket); // Use the service to save the ticket

        _ticket = new Ticket(); // Reset the ticket
        navi.NavigateTo("/tickets"); // Navigate to the tickets page
    }


    private string GenerateRandomId(int length)
    {
        const string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder stringBuilder = new StringBuilder(length);

        for (int i = 0; i < length; i++)
        {
            int index = random.Next(characters.Length);
            stringBuilder.Append(characters[index]);
        }

        return stringBuilder.ToString();
    }
}