@page "/tickets/details/{TicketId}/"
@using System.Xml.Linq
@using System.IO
@using System.Globalization
@using System.Collections.Generic
@using Empire.Models
@inject NavigationManager navi
@attribute [AllowAnonymous]

<h2>Ticket Details</h2>

@if (_ticket != null)
{
<div class="card">
    <div class="card-body">
        <p><strong>Ticket ID:</strong> @_ticket.TicketId</p>
        <p><strong>Severity:</strong> <span class="@GetSeverityCssClass(_ticket.Severity)">@_ticket.Severity</span></p>
        <p><strong>Due Date:</strong> @_ticket.DueDate.ToShortDateString()</p>
        <p><strong>Time ticket was created:</strong> @_ticket.TimeOfCreation</p>

        <p><strong>Description:</strong></p>
        <p>@_ticket.Description</p>
        <p><strong>Client Email:</strong> @_ticket.ClientEmail</p>
        <p><strong>Client Phone Number:</strong> @_ticket.ClientPhoneNumber</p>
        <p><strong>Ticket Administrator:</strong> @_ticket.TicketAdministrator</p>

        @if (_ticket.TechNotes != null && _ticket.TechNotes.Length > 0)
        {
            <p><strong>Tech Notes:</strong></p>
            <ul>
                @foreach (var note in _ticket.TechNotes)
                {
                    <li>@note.Trim()</li>
                }
            </ul>
        }
    </div>
</div>

<div class="d-flex justify-content-end">
    <div class="mb-3 mt-2 d-flex justify-content-evenly">
        <AuthorizeView Roles="Technician">
            <Authorized>
                <button class="btn btn-primary mb-3 mx-2" @onclick="ToggleTechNotesInput">Add Tech Notes</button>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="Administrator">
            <Authorized>
                <button class="btn btn-danger mb-3 mx-2" @onclick="DeleteTicket">Delete</button>
            </Authorized>
        </AuthorizeView>

    </div>
</div>

@if (showTechNotesInput)
{
    <div class="card">
        <div class="card-body">
            <h4>Add Tech Notes</h4>
            <div class="form-group">
                <textarea class="form-control" @bind="newTechNotes" rows="4"></textarea>
            </div>
            <div class="d-flex justify-content-end mt-2">
                <button class="btn btn-primary" @onclick="SaveTechNotes">Save Tech Notes</button>
            </div>
        </div>
    </div>
}
}
else
{
    <p>Ticket not found.</p>
}

@code {
    [Parameter]
    public string TicketId { get; set; }

    private Ticket _ticket;
    private bool isLoading = false;
    private bool showTechNotesInput = false;
    private string newTechNotes = string.Empty;

    protected override void OnInitialized()
    {
        LoadTicketDetails();
    }

    private void DeleteTicket()
    {
        string xmlFilePath = "tickets.xml";

        if (File.Exists(xmlFilePath))
        {
            XDocument xmlDoc = XDocument.Load(xmlFilePath);
            XElement ticketElement = xmlDoc.Root.Elements("Ticket")
                .FirstOrDefault(x => x.Element("ID").Value == TicketId);

            if (ticketElement != null)
            {
                ticketElement.Remove();
                xmlDoc.Save(xmlFilePath);
            }
        }

        navi.NavigateTo("/tickets");
    }

    private void LoadTicketDetails()
    {
        string xmlFilePath = "tickets.xml";

        if (File.Exists(xmlFilePath))
        {
            XDocument xmlDoc = XDocument.Load(xmlFilePath);
            XElement ticketElement = xmlDoc.Root.Elements("Ticket")
                .FirstOrDefault(x => x.Element("ID").Value == TicketId);

            if (ticketElement != null)
            {
                try
                {
                    _ticket = new Ticket
                        {
                            TicketId = ticketElement.Element("ID").Value,
                            Title = ticketElement.Element("Title").Value,
                            Severity = ticketElement.Element("Severity").Value,
                            DueDate = DateTime.ParseExact(
                                ticketElement.Element("DueDate").Value,
                                "dd-MM-yyyy",
                                CultureInfo.InvariantCulture
                                ),
                            TimeOfCreation = DateTime.ParseExact(
                                ticketElement.Element("TimeOfCreation").Value,
                                "yyyy-MM-dd HH:mm:ss",
                                CultureInfo.InvariantCulture
                                ),
                            Description = ticketElement.Element("Description").Value,
                            ClientEmail = ticketElement.Element("ClientEmail").Value,
                            ClientPhoneNumber = ticketElement.Element("ClientPhoneNumber").Value,
                            TicketAdministrator = ticketElement.Element("TicketAdministrator").Value,
                            TechNotes = ticketElement.Element("TechNotes")?
                                .Elements("Note")
                                .Select(note => note.Value)
                                .ToArray()
                        };
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading ticket details: {ex.Message}");
                }
            }
            else
            {
                _ticket = new Ticket(); // Or handle it differently
            }
        }
    }

    private void ToggleTechNotesInput()
    {
        showTechNotesInput = !showTechNotesInput;
    }

    private void SaveTechNotes()
    {
        string xmlFilePath = "tickets.xml";

        if (File.Exists(xmlFilePath))
        {
            XDocument xmlDoc = XDocument.Load(xmlFilePath);
            XElement ticketElement = xmlDoc.Root.Elements("Ticket")
                .FirstOrDefault(x => x.Element("ID").Value == TicketId);

            if (ticketElement != null)
            {
                XElement techNotesElement = ticketElement.Element("TechNotes");

                if (techNotesElement == null)
                {
                    techNotesElement = new XElement("TechNotes");
                    ticketElement.Add(techNotesElement);
                }

                XElement newNoteElement = new XElement("Note", newTechNotes);

                techNotesElement.Add(newNoteElement);
                xmlDoc.Save(xmlFilePath);

                List<string> techNotesList = new List<string>(_ticket.TechNotes ?? new string[0]);
                techNotesList.Add(newTechNotes);
                _ticket.TechNotes = techNotesList.ToArray();
            }
        }
        showTechNotesInput = false;
    }

    private string GetSeverityCssClass(string severity)
    {
        switch (severity.ToLower())
        {
            case "low":
                return "text-success";
            case "medium":
                return "text-warning";
            case "high":
                return "text-danger";
            default:
                return "";
        }
    }
}
