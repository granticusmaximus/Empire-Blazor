@page "/tickets/details/{TicketId}/"
@using System.Xml.Linq
@using System.IO
@using System.Globalization
@using System.Collections.Generic
@using Empire.Models
@using Empire.Service
@inject TicketService ticketService
@inject NavigationManager navi
@attribute [AllowAnonymous]

<h2>Ticket Details</h2>

@if (_ticket != null)
{
    <div class="card">
    <div class="card-body">
        <p><strong>Ticket ID:</strong> @_ticket.TicketId</p>
        <p><strong>Severity:</strong> <span class="@GetSeverityCssClass(_ticket.Severity.ToString())">@_ticket.Severity</span></p>
        <p><strong>Due Date:</strong> @_ticket.DueDate.ToShortDateString()</p>
        <p><strong>Time ticket was created:</strong> @_ticket.TimeOfCreation</p>

        <p><strong>Description:</strong></p>
        <p>@_ticket.Description</p>
        <p><strong>Client Email:</strong> @_ticket.ClientEmail</p>
        <p><strong>Client Phone Number:</strong> @_ticket.ClientPhoneNumber</p>
            @if (_ticket != null && !string.IsNullOrEmpty(_ticket.TechNotes))
            {
                <p><strong>Tech Notes:</strong></p>
                <ul>
                    @foreach (var note in _ticket.TechNotes.Split('\n'))
                    {
                        <li>@note</li>
                    }
                </ul>
            }
    </div>
</div>

    <div class="d-flex justify-content-end">
        <div class="mb-3 mt-2 d-flex justify-content-evenly">
            <AuthorizeView Roles="Technician">
                <Authorized>
                    <button class="btn btn-primary mb-3 mx-2" @onclick="ToggleTechNotesInput">Add Tech Notes</button>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView Roles="Administrator">
                <Authorized>
                    <button class="btn btn-danger mb-3 mx-2" @onclick="DeleteTicket">Delete</button>
                </Authorized>
            </AuthorizeView>

        </div>
    </div>

    @if (showTechNotesInput)
    {
        <div class="card">
            <div class="card-body">
                <h4>Add Tech Notes</h4>
                <div class="form-group">
                    <textarea class="form-control" @bind="newTechNotes" rows="4"></textarea>
                </div>
                <div class="d-flex justify-content-end mt-2">
                    <button class="btn btn-primary" @onclick="SaveTechNotes">Save Tech Notes</button>
                </div>
            </div>
        </div>
    }
}
else if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">
        @message
    </div>
}

@code {
    [Parameter]
    public string TicketId { get; set; }
    private string message = "";
    private Ticket _ticket;
    private bool isLoading = false;
    private bool showTechNotesInput = false;
    private string newTechNotes = string.Empty;

    protected override void OnInitialized()
    {
        LoadTicketDetails();
    }

    private async Task DeleteTicket()
    {
        await ticketService.DeleteTaskAsync(TicketId);
        navi.NavigateTo("/tickets");
    }


    private async Task LoadTicketDetails()
    {
        _ticket = await ticketService.GetTaskByIdAsync(TicketId);

        if (_ticket == null)
        {
            message = "There was an error with retrieving the ticket!";
        }
    }

    private void ToggleTechNotesInput()
    {
        showTechNotesInput = !showTechNotesInput;
    }

    private async Task SaveTechNotes()
    {
        _ticket = await ticketService.GetTaskByIdAsync(TicketId);

        if (_ticket != null)
        {
            // Check if _ticket.TechNotes is not null or empty and append a delimiter
            // For example, using a newline character to separate notes
            if (!string.IsNullOrEmpty(_ticket.TechNotes))
            {
                _ticket.TechNotes += "\n"; // Newline as a separator
            }

            // Append the new tech note
            _ticket.TechNotes += newTechNotes;

            // Update the ticket using the service
            await ticketService.UpdateTaskAsync(_ticket);
        }

        showTechNotesInput = false;
    }


    private string GetSeverityCssClass(string severity)
    {
        switch (severity.ToLower())
        {
            case "low":
                return "text-success";
            case "medium":
                return "text-warning";
            case "high":
                return "text-danger";
            default:
                return "";
        }
    }
}
