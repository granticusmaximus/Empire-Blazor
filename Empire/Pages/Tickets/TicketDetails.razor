@page "/tickets/details/{TicketId}/"
@using Empire.Models
@using Empire.Service
@inject TicketService ticketService
@inject NavigationManager navi
@attribute [AllowAnonymous]

<h2>Ticket Details</h2>
<hr />
<div class="col-md-6">
    <NavLink class="btn btn-success" href="Tickets">
        <span aria-hidden="true">Back to Tickets</span>
    </NavLink>
    @if (!string.IsNullOrEmpty(TicketId))
    {
        var editTicketUrl = $"tickets/edit/{TicketId}";
        <NavLink class="btn btn-primary ml-2" href="@editTicketUrl">
            <span aria-hidden="true">Edit Ticket</span>
        </NavLink>
    }
</div>
<hr />
@if (_ticket != null)
{
    <div class="card">
    <div class="card-body">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Severity:</th>
                    <th scope="col">Due Date:</th>
                    <th scope="col">Time Created:</th>
                    <th scope="col">Description:</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">@_ticket.TicketId</th>
                    <td class="@GetSeverityCssClass(_ticket.Severity.ToString()) text-uppercase text-white text-center"
                        style="font-weight: 700">@_ticket.Severity</td>
                    <td>@_ticket.DueDate.ToShortDateString()</td>
                    <td>@_ticket.TimeOfCreation</td>
                    <td>@_ticket.Description</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
    <hr />

    <div class="card">
    <div class="card-body">
        <p><strong>Ticket Comments:</strong></p>
        @if (_ticket.TicketTechNotes != null && _ticket.TicketTechNotes.Any())
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Comments</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ticketTechNote in _ticket.TicketTechNotes)
                        {
                            <tr>
                                <td>@ticketTechNote.TechNote.Notes</td>
                                <td>
                                    <button class="btn btn-sm btn-danger"
                                        @onclick="@(() => DeleteTechNote(ticketTechNote.TechNote.Id))"><span class="oi oi-trash"
                                            aria-hidden="true"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No ticket notes available.</p>
            }
        </div>
    </div>

    <button class="btn btn-primary mt-3" @onclick="OpenModal">Add Comment</button>

    <!-- Tech Note Modal -->
    <div class="modal fade @(showModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Comment</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <textarea class="form-control" @bind="newTechNotes" rows="4"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTechNotes">Save Comment</button>
                </div>
            </div>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}


@code {
    [Parameter]
    public string TicketId { get; set; }
    private string message = "";
    private Ticket _ticket;
    private string newTechNotes = string.Empty;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTicketDetails();
    }

    private async Task LoadTicketDetails()
    {
        _ticket = await ticketService.GetTaskByIdAsync(TicketId, includeTechNotes: true);

        if (_ticket == null)
        {
            message = "There was an error with retrieving the ticket!";
        }
    }

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveTechNotes()
    {
        if (!string.IsNullOrWhiteSpace(newTechNotes))
        {
            var techNote = new TechNote { Notes = newTechNotes };
            await ticketService.AddTechNoteToTicketAsync(TicketId, techNote);
            newTechNotes = string.Empty;
            await LoadTicketDetails();
            CloseModal();
        }
        else
        {
            message = "There was an error with saving the note!";
        }
    }

    private string GetSeverityCssClass(string severity)
    {
        switch (severity.ToLower())
        {
            case "low":
                return "bg-success"; // Green
            case "medium":
                return "bg-warning"; // Orange
            case "high":
                return "bg-danger"; // Red
            default:
                return "";
        }
    }

    private async Task DeleteTechNote(int techNoteId)
    {
        await ticketService.DeleteTechNoteAsync(techNoteId);
        await LoadTicketDetails();
    }
}
