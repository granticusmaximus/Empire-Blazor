@page "/EditUser/{UserId}"
@using Empire.Data
@using Empire.Models
@using Empire.Service
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext context
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager

<h3>Edit User</h3>
<hr />

<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="form-group">
            <label for="FirstName" class="control-label">First Name</label>
            <InputText id="FirstName" class="form-control" @bind-Value="@user.FirstName" />
            <ValidationMessage For="@(() => user.FirstName)" />
        </div>
        <div class="form-group">
            <label for="LastName" class="control-label">Last Name</label>
            <InputText id="LastName" class="form-control" @bind-Value="@user.LastName" />
            <ValidationMessage For="@(() => user.LastName)" />
        </div>
        <div class="form-group">
            <label for="Gender" class="control-label">Gender</label>
            <InputSelect id="Gender" class="form-control" @bind-Value="@user.Gender">
                <option value="">--Select Option--</option>
                @foreach (var gender in Enum.GetValues<Gender>())
                {
                    <option value="@gender">@gender</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.Gender)" />
        </div>
        <div class="form-group">
            <label for="Cellnumber" class="control-label">Cell Number</label>
            <InputText id="Cellnumber" class="form-control" @bind-Value="@user.Cellnumber" />
            <ValidationMessage For="@(() => user.Cellnumber)" />
        </div>
        <div class="form-group">
            <label for="Address" class="control-label">Address</label>
            <InputText id="Address" class="form-control" @bind-Value="@user.Address" />
            <ValidationMessage For="@(() => user.Address)" />
        </div>
        <div class="form-group">
            <label for="City" class="control-label">City</label>
            <InputText id="City" class="form-control" @bind-Value="@user.City" />
            <ValidationMessage For="@(() => user.City)" />
        </div>
        <div class="form-group">
            <label for="RoleId" class="control-label">Role</label>
            <InputSelect id="RoleId" class="form-control" @bind-Value="@user.RoleId">
                <option value="">--Select Option--</option>
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => user.RoleId)" />
        </div>

        <div class="form-group">
            <label for="Email" class="control-label">Email</label>
            <InputText id="Email" class="form-control" @bind-Value="@user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Update</button>
            <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public string UserId { get; set; }
    ApplicationUser user = new ApplicationUser();
    List<Role> roles = new List<Role>();

    protected override async Task OnInitializedAsync()
    {
        user = await userManager.FindByIdAsync(UserId);
        roles = await context.Roles.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("Users");
            }
            else
            {
                // Handle the error appropriately, maybe display a message to the user.
            }
        }
        catch (Exception ex)
        {
            // Handle the error appropriately.
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("Users");
    }
}
