@page "/Users"
@using Empire.Data
@using Empire.Models
@using Empire.Pages.Roles
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore;
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject NavigationManager navi

<h3>Users</h3>
<hr />
<div class="col-md-6">
    <NavLink class="btn btn-success" href="AddUser">
        <span aria-hidden="true">Add User</span>
    </NavLink>
    <span>
        <button @onclick="OpenRoleListModal" class="btn btn-warning">Show Current Roles</button>
    </span>
    <span>
        <button @onclick="OpenNewRoleModal" class="btn btn-info">Add New Role</button>
    </span>
</div>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Email</th>
                <th>Full Name</th>
                <th>Cell #</th>
                <th>Address</th>
                <th>City</th>
                <th>Designation</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.FullName</td>
                    <td>@user.Cellnumber</td>
                    <td>@user.Address</td>
                    <td>@user.City</td>
                    <td>@user.Designation</td>
                    <td>@(user.Role != null ? user.Role.Name : "N/A")</td>
                    <td>
                        <button @onclick="() => EditUser(user)" class="btn btn-success btn-sm mr-2">Edit</button>
                        <button @onclick="() => DeleteUser(user)" class="btn btn-danger btn-sm">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Role List Modal -->
    <div class="modal fade @(showRoleListModal ? "show d-block" : "")" id="listRoleModal" tabindex="-1" role="dialog" aria-labelledby="listRoleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="listRoleModalLabel">List of Roles</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseRoleListModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <Roles />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseRoleListModal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Role Modal -->
    <div class="modal fade @(showAddRoleModal ? "show d-block" : "")" id="addRoleModal" tabindex="-1" role="dialog" aria-labelledby="addRoleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addRoleModalLabel">Add New Role</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseNewRoleModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <AddRoles />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseNewRoleModal">Close</button>
                </div>
            </div>
        </div>
    </div>

}


@code {
    private List<ApplicationUser> users;
    private bool showAddRoleModal = false;
    private bool showRoleListModal = false;
    private bool IsAdmin { get; set; }

    private void OpenRoleListModal()
    {
        showRoleListModal = true;
    }

    private void CloseRoleListModal()
    {
        showRoleListModal = false;
    }

    private void OpenNewRoleModal()
    {
        showAddRoleModal = true;
    }

    private void CloseNewRoleModal()
    {
        showAddRoleModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckIfUserIsAdmin();
        users = await userManager.Users.Include(u => u.Role).ToListAsync();
    }

    private void EditUser(ApplicationUser user)
    {
        navi.NavigateTo($"/EditUser/{user.Id}");
    }

    private async Task CheckIfUserIsAdmin()
    {
        var currentUser = await userManager.GetUserAsync(signInManager.Context.User);
        if (currentUser != null && currentUser.Role != null)
        {
            IsAdmin = currentUser.Role.Name == "Admin";
        }
    }

    private async Task DeleteUser(ApplicationUser user)
    {
        var result = await userManager.DeleteAsync(user);
        if (result.Succeeded)
        {
            // Refresh the list after deletion
            users = await userManager.Users.ToListAsync();
            StateHasChanged();  // Notify Blazor to re-render the component
        }
        else
        {
            // Handle the error appropriately, maybe display a message to the user.
        }
    }
}
