@page "/task/edit/{MsrID:int}"
@using Empire.Data
@using Empire.Models
@using Empire.Service
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@inject MSRService TaskService
@inject AppService AppService


<EditForm Model="@msrTask" OnValidSubmit="@SaveTaskAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="msrTitle">Task Number/MSR Title:</label>
        <InputText id="msrTitle" class="form-control" @bind-Value="@msrTask.MSRtitle" />
    </div>

    <div class="form-group">
        <label for="dateAdded">Date Completed:</label>
        <InputDate id="dateAdded" class="form-control" @bind-Value="@msrTask.DateAdded" />
    </div>

    <div class="form-group">
        <label for="msrNote">Notes:</label>
        <InputTextArea id="msrNote" class="form-control" @bind-Value="@msrTask.MSRNote" />
    </div>

    <div class="form-group">
        <label for="assignedUserId">User Assigned:</label>
        <InputSelect @bind-Value="msrTask.AssignedUserID" class="form-control" id="AssignedUserID">
            <option value="">-- Select User --</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.FullName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="assignedAppId">App Assigned:</label>
        <InputSelect @bind-Value="msrTask.AssignedAppID" class="form-control" id="AssignedAppID">
            <option value="">-- Select App --</option>
            @foreach (var app in apps)
            {
                <option value="@app.AppID">@app.AppName</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-success">Save Task</button>
</EditForm>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">
        @message
    </div>
}
@code {
    [Parameter]
    public int MsrID { get; set; }
    private string message = "";
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private List<AppList> apps = new List<AppList>();
    private MSRTask msrTask { get; set; } = new MSRTask();

    protected override async Task OnInitializedAsync()
    {
        msrTask = await TaskService.GetMSRTaskByIdAsync(MsrID);
        users = await userManager.Users.ToListAsync();
        apps = await AppService.GetAllAppsAsync();
    }

    private async Task SaveTaskAsync()
    {
        try
        {
            bool result = await TaskService.UpdateMSRTaskAsync(msrTask);
            if (result)
            {
                message = "Task updated successfully!";
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            message = "The task has been modified by another user. Please reload and try again.";
        }
    }
}